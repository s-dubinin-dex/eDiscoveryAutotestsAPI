plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
    id "io.freefair.lombok" version "8.11"
}

repositories {
    mavenCentral()
}

def allureVersion = '2.27.0',
    selenideVersion = '6.10.1',
    junitVersion = '5.9.0',
    javaFakerVersion = "1.0.2",
    gsonVersion = '2.7'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:1.9.9.1",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            'io.rest-assured:rest-assured:5.3.0',
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-junit5:$allureVersion",
            'com.fasterxml.jackson.core:jackson-databind:2.14.0',
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.23.1",
            "com.google.code.gson:gson:$gsonVersion",
            "com.github.javafaker:javafaker:$javaFakerVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            'org.postgresql:postgresql:42.7.3',
    )
    testRuntimeOnly(
            'org.slf4j:slf4j-simple:2.0.5',
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

tasks.register('copyCategoriesFile', Copy) {
    from 'src/test/resources/allurecategories/categories.json'
    into "$buildDir/allure-results"
}

tasks.register('copyEnvironmentFile', Copy) {
    from 'src/test/resources/allureenvironment/environment.properties'
    into "$buildDir/allure-results"
}

task testWithEnv(type: Test) {
    // Параметр Gradle, указывающий стенд (dev, test, prod и т.д.)
    def environment = project.hasProperty('env') ? project.findProperty('env') : 'test'

//    def environment = 'dev'
//    def environment = 'test'
//    def environment = 'local'

    // Установка системных свойств для использования во время выполнения тестов
    System.setProperty('BASE_URL',              getProperty(environment as String, 'BASE_URL'))
    System.setProperty('IDENTITY_URL',          getProperty(environment as String, 'IDENTITY_URL'))
    System.setProperty('ADMIN_URL',             getProperty(environment as String, 'ADMIN_URL'))
    System.setProperty('DEAL_URL',              getProperty(environment as String, 'DEAL_URL'))
    System.setProperty('CLASSIFIER_URL',        getProperty(environment as String, 'CLASSIFIER_URL'))

    System.setProperty('PG_USERNAME',           getProperty(environment as String, 'PG_USERNAME'))
    System.setProperty('PG_PASSWORD',           getProperty(environment as String, 'PG_PASSWORD'))
    System.setProperty('PG_DEAL_CONNECTION',    getProperty(environment as String, 'PG_DEAL_CONNECTION'))

    // Отладочное сообщение для проверки значения системного свойства
    println "System property 'BASE_URL': ${System.getProperty('BASE_URL')}"
    println "System property 'IDENTITY_URL': ${System.getProperty('IDENTITY_URL')}"
    println "System property 'ADMIN_URL': ${System.getProperty('ADMIN_URL')}"
    println "System property 'DEAL_URL': ${System.getProperty('DEAL_URL')}"
    println "System property 'CLASSIFIER_URL': ${System.getProperty('CLASSIFIER_URL')}"

    println "System property 'PG_USERNAME': ${System.getProperty('PG_USERNAME')}"
    println "System property 'PG_PASSWORD': ${System.getProperty('PG_PASSWORD')}"
    println "System property 'PG_DEAL_CONNECTION': ${System.getProperty('PG_DEAL_CONNECTION')}"

    systemProperties(System.getProperties())
    // Установка JUnit Platform как используемого фреймворка
    useJUnitPlatform()

    // Запуск тестов
    dependsOn test, copyEnvironmentFile, copyCategoriesFile
}

def getProperty(String environment, String propertyName) {
    def configFile = file("src/test/resources/config/${environment}.properties")
    def config = new Properties()
    config.load(new FileInputStream(configFile))
    println "Loaded properties from ${configFile}: ${config}"
    def propertyValue = config.getProperty(propertyName)
    println "Retrieved property ${propertyName}: ${propertyValue}"
    return propertyValue
}

//tasks.withType(Test).configureEach {
//    systemProperties(System.getProperties())
//    useJUnitPlatform()
//}